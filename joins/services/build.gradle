import org.apache.tools.ant.filters.*

buildscript {
    repositories {
      maven { url 'https://plugins.gradle.org/m2/' }
    }
  dependencies {
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.3.0'
  }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'nebula.ospackage-application'
apply plugin: 'maven'

group = 'it.swim'
description = "Illustrate communication between services using command and join lanes"
version = project.property("application.version")
sourceCompatibility = 1.8

repositories {
  maven {
    url 'https://repo.swim.it/swim-releases/'
    credentials {
      username "${artifactoryUserName}"
      password "${artifactoryUserPassword}"
    }
    authentication {
      digest(BasicAuthentication)
    }
  }
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  maven { url 'https://oss.sonatype.org/content/repositories/releases' }
  mavenCentral()
}

configurations.all {
  resolutionStrategy {
    cacheChangingModulesFor 3600, 'seconds'
  }
}

dependencies {
  compile 'ai.swim:swim-client:0.1.0.20180216001614'
  compile 'ai.swim:swim-server:0.1.0.20180216001614'
  testCompile 'org.testng:testng:6.9.10'
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

compileJava {
  options.compilerArgs += ['-Xlint']
}

compileTestJava {
  options.compilerArgs += ['-Xlint']
}

test {
  useTestNG()

  scanForTestClasses = false
  include '**/*Spec.class'

  testLogging {
    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    exceptionFormat 'full'
    displayGranularity = 4
  }

  outputs.upToDateWhen { false }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

javadoc {
  options.charSet = 'UTF-8'
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

// gradle -Pconfig=swim.recon runMain
if (project.hasProperty('mainClassName')) {
  task runMain(type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.test.runtimeClasspath
    if (project.hasProperty('config')) {
      args = [project.property('config')]
    }

    systemProperties System.properties
  }
}

mainClassName = 'ai.swim.App'
